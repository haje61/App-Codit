=head1 NAME 

App::Codit::Commands - Overview of available commands

=head1 DESCRIPTION

This is a list of available commands for L<App::Codit>. You will find a link to the
related module after the name the command. Please note that if the command is
held by an extension or plugin that extension or plugin must be loaded for it to
work.

A command can be executed as follows:

 my $result = $app->cmdExecute('command_name', @options)
 my @result = $app->cmdExecute('command_name', @options)

Generated: Sat Mar 29 08:32:06 2025

=head1 COMMANDS

=over

=item B<about> in L<Tk::AppWindow::Ext::Help>

Pops the about box.

=item B<available_icon_sizes> in L<Tk::AppWindow::Ext::Art>

Returns a list of available icon sizes.

=item B<available_icon_themes> in L<Tk::AppWindow::Ext::Art>

Returns a list of available icon themes.

=item B<bm_plug_next> in L<App::Codit::Plugins::Bookmarks>

Jumps to the next selected bookmark.

=item B<bm_plug_previous> in L<App::Codit::Plugins::Bookmarks>

Jumps to the previous selected bookmark.

=item B<bookmark_add> in L<App::Codit::Ext::CoditMDI>

Adds the current line to the bookmarks list.

=item B<bookmark_clear> in L<App::Codit::Ext::CoditMDI>

Clears all bookmarks in the current document.

=item B<bookmark_fill> in L<App::Codit::Ext::CoditMDI>

Called when the bookmark menu is popped. It fills it with
the bookmarks in the current document.

=item B<bookmark_next> in L<App::Codit::Ext::CoditMDI>

Jump to the next bookmark in the current document.

=item B<bookmark_prev> in L<App::Codit::Ext::CoditMDI>

Jump to the previous bookmark in the current document.

=item B<bookmark_remove> in L<App::Codit::Ext::CoditMDI>

Removes the bookmark on the current line, if any.

=item B<deferred_open> in L<Tk::AppWindow::Ext::MDI>

Takes a document name that is in deferred state as parameter and creates a new content handler for it.
Returns a boolean indicating the succesfull load of its content.

=item B<doc_autobracket> in L<App::Codit::Ext::CoditMDI>

Sets and returns the autobracket option of the currently selected document.

=item B<doc_autoindent> in L<App::Codit::Ext::CoditMDI>

Sets and returns the autoindent option of the currently selected document.

=item B<doc_case_lower> in L<App::Codit::Ext::CoditMDI>

If there is a selection it turns it to lower case.
Else it only turns the character at the insert position to lower case.

=item B<doc_case_upper> in L<App::Codit::Ext::CoditMDI>

If there is a selection it turns it to upper case.
Else it only turns the character at the insert position to upper case.

=item B<doc_close> in L<Tk::AppWindow::Ext::MDI>

Takes a document name as parameter and closes it.
If no parameter is specified closes the current selected document.
Returns a boolean for succes or failure.

=item B<doc_delete> in L<App::Codit::Ext::CoditMDI>

Closes the current selected document and deletes the document file from disk.
Use with caution.

=item B<doc_delete_dialog> in L<App::Codit::Ext::CoditMDI>

Same as I<doc_delete> except it first asks nicely if you really want to do that.

=item B<doc_find> in L<App::Codit::Ext::CoditMDI>

Pops up the search bar in the currently selected document.

=item B<doc_fix_indent> in L<App::Codit::Ext::CoditMDI>

Asks for the number of spaces per tab and attempts
to reformat the indentation taking the indentstyle into account.

If a selection exists it will do this for the selection, otherwise it
will scan the whole document.

=item B<doc_get_sel> in L<App::Codit::Ext::CoditMDI>

Returns the begin and end index of the current selection.

=item B<doc_get_text> I<$begin>, I<$end> in L<App::Codit::Ext::CoditMDI>

Returns the text in the current selected document from index $begin to index $end.

=item B<doc_new> in L<Tk::AppWindow::Ext::MDI>

Takes a document name as parameter and creates a new document.
If no parameter is specified an Untitled document is created.
Returns a boolean for succes or failure.

=item B<doc_open> in L<Tk::AppWindow::Ext::MDI>

Takes a filename as parameter and opens it in deferred state.
If no parameter is specified a file dialog is issued.
Returns a boolean for succes or failure.

=item B<doc_remove_trailing> in L<App::Codit::Ext::CoditMDI>

Removes spaces at the end of each line.

If a selection exists it will do this for the selection, otherwise it
will scan the whole document.

=item B<doc_rename> in L<Tk::AppWindow::Ext::MDI>

Takes two document names as parameters and renames the first one to
the second one in the interface.

=item B<doc_replace> in L<App::Codit::Ext::CoditMDI>

Pops up the search and replace bar in the currently selected document.

=item B<doc_save> in L<Tk::AppWindow::Ext::MDI>

Takes a document name as parameter and saves it if it is modified.
If no parameter is specified the current selected document is saved.
Returns a boolean for succes or failure.

=item B<doc_save_all> in L<Tk::AppWindow::Ext::MDI>

Saves all open and modified documents.
Returns a boolean for succes or failure.

=item B<doc_save_as> in L<Tk::AppWindow::Ext::MDI>

Takes a document name as parameter and issues a file dialog to rename it.
If no parameter is specified the current selected document is initiated in the dialog.
Returns a boolean for succes or failure.

=item B<doc_select> in L<Tk::AppWindow::Ext::MDI>

Select an opened document.

=item B<doc_wrap> in L<App::Codit::Ext::CoditMDI>

Sets and returns the wrap option of the currently selected document.

=item B<edit_delete>, I<$begin>, I<$end> in L<App::Codit::Ext::CoditMDI>

Deletes text in the currently selected document. It takes two indices as parameters.

=item B<edit_insert>, I<$index>, I<$text> in L<App::Codit::Ext::CoditMDI>

Inserts text in the currently selected document. It takes an index and a string as parameters.

=item B<edit_replace>, I<$begin>, I<$end>, I<$text> in L<App::Codit::Ext::CoditMDI>

Replaces text in the currently selected document. It takes two indices and a text as parameters.

=item B<git_collapse> in L<App::Codit::Plugins::Git>

Collapses the git document tree and only opens the current selected document, if it is in
the current selected repository.

=item B<git_command> I<$project>, I<$commandstring> in L<App::Codit::Plugins::Git>

Executes the git command in $commandstring for repository $project.

=item B<git_expand> in L<App::Codit::Plugins::Git>

Epxands the git document tree.

=item B<git_open_all> in L<App::Codit::Plugins::Git>

Opens all files in the current selected repository.

=item B<git_remove> I<?$name?> in L<App::Codit::Plugins::Git>

If $name is not specified, $name is the selected document.

Closes $name, Removes it from the current selected repository
and deletes the file from disk. Use with care.

=item B<git_remove_dialog> in L<App::Codit::Plugins::Git>

Same as git_remove but first asks nicely if you really want to do this.

=item B<help> in L<Tk::AppWindow::Ext::Help>

Loads the helpfile in your system's default application or browser.

=item B<key_released>, I<$doc>, I<$key> in L<App::Codit::Ext::CoditMDI>

Dummy command only meant for hooking on by plugins. Called every time a visible character
key was pressed.

=item B<modified>, I<$doc>, I<$index> in L<App::Codit::Ext::CoditMDI>

Called every time you make an edit, it gets a document name and an index as parameters.
It checks if there are any macros that should be restarted.
Many plugins hook on to this command.

=item B<plugsdialog> in L<Tk::AppWindow::Ext::Plugins>

Creates a dialog window in which the user can select and unselect plugins

=item B<pop_hist_menu> in L<Tk::AppWindow::Ext::MDI>

Is called when the file menu is opened in the menubar. It populates the
'Open recent' menu with the current history.

=item B<quit> in L<Tk::AppWindow>

Calls the CmdQuit method. See there.

=item B<session_dialog> in L<App::Codit::Plugins::Sessions>

Pops the dialog for managing sessions.

=item B<session_fill_menu> in L<App::Codit::Plugins::Sessions>

Called when the Session menu in the menu bar is opened.

=item B<session_new> in L<App::Codit::Plugins::Sessions>

Closes current session and creates a new, unnamed, one.

=item B<session_open> in L<App::Codit::Plugins::Sessions>

Takes a session name as parameter. Closes current session and opens the new one.

=item B<session_save> in L<App::Codit::Plugins::Sessions>

Save current session. If the session was not saved before, a dialog will pop to enter a name.

=item B<session_save_as> in L<App::Codit::Plugins::Sessions>

Save current session under a new name.

=item B<set_title> in L<Tk::AppWindow::Ext::MDI>

Takes a document name as parameter and sets the main window title accordingly.

=item B<settings> in L<Tk::AppWindow::Ext::Settings>

Launches the settings dialog.

=item B<split_cancel> in L<App::Codit::Plugins::SplitView>

Removes an existing split from view.

=item B<split_horizontal> in L<App::Codit::Plugins::SplitView>

Creates a horizontal split.

=item B<split_vertical> in L<App::Codit::Plugins::SplitView>

Creates a vertical split.

=item B<updates> in L<Tk::AppWindow::Ext::Help>

Pops the updates box and starts checking for updates.

=item Switch B<-report_issue> in L<App::Codit>

Opens the issues web page of the App::Codit github repository.

=back

=head1 LICENSE

Same as Perl.

=head1 AUTHOR

Hans Jeuken (hanje at cpan dot org)

=cut

